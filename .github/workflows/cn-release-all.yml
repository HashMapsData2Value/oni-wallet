name: Launch cloud distribution
# Must be manually dispatched for now
# Leverages the cargo-packager approach

on:
  workflow_dispatch:
    inputs:
      app-slug:
        description: "The slug of your app in your CrabNebula Cloud org"
        required: true
        default: "oni"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # need to do a better job of managing these
  APP_CARGO_TOML: src-tauri/Cargo.toml
  CN_APP_SLUG: ${{ github.event.inputs.app-slug || 'oni' }}
  CN_API_KEY: ${{ secrets.CN_API_KEY }} 

jobs:
  metadata:
  # sourced from our CLI releaser, there are problems
    name: Gather metadata
    runs-on: ubuntu-latest
    outputs:
      cli-version: ${{ steps.version.outputs.version }}
      release-exists: ${{ steps.release-exists.outputs.status }}
    steps:
      - name: ðŸ“‚ Checkout Repository
        id: checkout-repository
        uses: actions/checkout@v3

      - name: Install CLI
        id: install-cli
        # From https://web.crabnebula.cloud/application/cn-cli
        run: |
          wget https://cdn.crabnebula.app/download/01HKMY6ZXJA3P0QHA5GQY8KKRT/latest/cn_linux -O cn
          chmod +x cn

      - name: CN whoami
        id: whoami
        run: ./cn whoami
        env:
          CN_API_KEY: ${{ secrets.CN_API_KEY }}

      - name: Find CLI crate version
        # this needs to be more robust and check package.json etc. etc. etc.
        id: version
        run: |
          version=$(yq -e '.package.version' src-tauri/Cargo.toml);
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: See if this version already exists
        id: release-exists
        # Note: We should flip the exit code. When exit=0 this means a release is *found*, and that should be an error.
        # It is good enough to bail if the release exists. There are reasons to publish an "older release", such as
        # for a hotfix / backport / security issue
        run: |
          set +e
          ./cn release show $CN_APP_SLUG ${{ steps.version.outputs.version }}
          echo "status=$?" >> "$GITHUB_OUTPUT"
        env:
 

  draft:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.read_version.outputs.value }}
      needs_release: ${{ steps.create_tag.outputs.tag_existed != 'true' }}
    permissions:
      contents: write
    needs: metadata
    if: ${{ needs.metadata.outputs.release-exists != '0' }}

    steps:
      - uses: actions/checkout@v4

      - name: Read version number
        uses: SebRollen/toml-action@v1.0.2
        id: read_version
        with:
          file: ${{ env.APP_CARGO_TOML }}
          field: "package.version"

      - name: create draft release
        uses: crabnebula-dev/cloud-release@v0.2.1
        id: draft
        with:
          command: release draft $CN_APP_SLUG "${{ steps.read_version.outputs.value }}" --framework packager
          api-key: ${{ secrets.CN_API_KEY }}

  build-desktop:
    needs: draft
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

      - name: Install stable Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install pnpm and frontend dependencies
        uses: pnpm/action-setup@v2
        with:
          version: ^9.0.5
          run_install: true

      - name: Install apt dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install -y --no-install-recommends libwebkit2gtk-4.1-dev libgtk-3-dev librsvg2-dev

      - name: Build front-end
        run: pnpm build

      - name: Install cargo packager
        run: cargo install cargo-packager

      - name: Setup api key file
        if: matrix.platform.os == 'macos-latest'
        run: echo "${{ secrets.APPLE_API_KEY }}" > $RUNNER_TEMP/AuthKey.p8

      - name: Build the app
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_PATH: "$RUNNER_TEMP/AuthKey.p8"
        run: |
          cd src-tauri
          cargo packager --release
          mv target/release/* ..

      - name: Remove api key file
        if: matrix.platform.os == 'macos-latest'
        run: rm $RUNNER_TEMP/AuthKey.p8

      - name: Upload assets    
        uses: crabnebula-dev/cloud-release@v0.2.1
        with:
          command: release upload $CN_APP_SLUG --framework packager
          api-key: ${{ secrets.CN_API_KEY }}

  build-android:
    # sourced from Jonas's DASH workflow
    needs: draft
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install pnpm and frontend dependencies
        uses: pnpm/action-setup@v2
        with:
          version: ^9.0.5
          run_install: true

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android armv7-linux-androideabi

      - uses: Swatinem/rust-cache@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d
          link-to-sdk: true

      - name: setup Android keystore
        run: base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks

      - name: Setup target dir on /mnt
        run: |
          sudo mkdir /mnt/target
          WORKSPACE_OWNER="$(stat -c '%U:%G' "${GITHUB_WORKSPACE}")"
          sudo chown -R "${WORKSPACE_OWNER}" /mnt/target

      - name: Build Android package
        run: |
          export NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export ANDROID_KEYSTORE=$RUNNER_TEMP/keystore.jks
          pnpm tauri android init
          pnpm tauri android build --target aarch64 armv7
        env:
          CARGO_TARGET_DIR: /mnt/target
          # these are used from within src-tauri/gen/android/app/build.gradle.kts to configure the signing
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload to CrabNebula
        uses: crabnebula-dev/cloud-release@main
        with:
          command: release upload ${{ secrets.CN_APP_SLUG }} --file src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk ${{ needs.draft.outputs.version }}
          api-key: ${{ secrets.CN_API_KEY }}
      # Need to push to Play store here

  build-ios:
    # sourced from Jonas's DASH workflow
    needs: draft
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - uses: Swatinem/rust-cache@v2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install pnpm and frontend dependencies
        uses: pnpm/action-setup@v2
        with:
          version: ^9.0.5
          run_install: true

      - name: setup iOS signing
        uses: crabnebula-dev/apple-certificate-action@main
        with:
          apple-certificate-base64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          apple-certificate-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          provisioning-profile-base64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}

      - name: Build iOS package
        run: |
          /usr/libexec/PlistBuddy -c "Set method app-store" src-tauri/gen/apple/ExportOptions.plist
          pnpm tauri ios build -vv
        env:
          APPLE_DEVELOPMENT_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}

      - name: Upload to TestFlight
        run: |
          echo "${{ secrets.APPLE_API_KEY }}" > $RUNNER_TEMP/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          export API_PRIVATE_KEYS_DIR=$RUNNER_TEMP
          xcrun altool --validate-app --type ios -f src-tauri/gen/apple/build/arm64/dash.ipa --apiKey ${{ secrets.APPLE_API_KEY_ID }} --apiIssuer ${{ secrets.APPLE_API_ISSUER }}
          xcrun altool --upload-app --type ios -f src-tauri/gen/apple/build/arm64/dash.ipa --apiKey ${{ secrets.APPLE_API_KEY_ID }} --apiIssuer ${{ secrets.APPLE_API_ISSUER }}

      - name: Upload to CrabNebula
        uses: crabnebula-dev/cloud-release@main
        with:
          command: release upload --file src-tauri/gen/apple/build/arm64/{{dash}}.ipa ${{ secrets.CN_APP_SLUG }} ${{ needs.draft.outputs.version }}
          api-key: ${{ secrets.CN_API_KEY }}

  publish:
    needs: [build-desktop, build-android, build-ios]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: publish release
        uses: crabnebula-dev/cloud-release@v0.2.1
        with:
          command: release publish $CN_APP_SLUG --framework packager
          api-key: ${{ secrets.CN_API_KEY }}